/*
MIT License

Copyright (c) 2023 dabric

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
(() => {
	function purifyURL(url) {
		let string = url.host + url.pathname;
		if (string.endsWith("/")) string = string.slice(0, -1);
		return string;
	}

	const thisScript = document.currentScript;
	const noCache = thisScript.getAttribute("data-nocache") != null;
	const externalPage = thisScript.getAttribute("data-list");

	function randInt(min, max) {
		return ~~(Math.random() * (max - min) + min);
	}

	function gotoMember(member) {
		location.replace(member.url);
	}

	function gotoMemberAtIndex(index) {
		gotoMember(members.at(index % members.length));
	}

	const localStorageKey = `lc-cache-${location.pathname}`;

	let members = [];

	function processURL(quiet = false) {
		const location = new URL(document.location);
		let referrer = null;
		try {
			referrer = new URL(document.referrer);
		} catch {}

		const searchParams = [...location.searchParams.entries()];
		const action = searchParams[0]?.[0];
		const slug = searchParams[0]?.[1];
		if (action) {
			let resolvedIndex = null;
			for (let index = 0; index < members.length; index++) {
				const element = members[index];
				const memberURL = new URL(element.url);
				const memberSlug = element.slug;

				if (memberSlug === slug) {
					resolvedIndex = index;
					continue;
				} else if (referrer) {
					const purifiedMemberURL = purifyURL(memberURL);
					const purifiedReferrer = purifyURL(referrer);

					if (purifiedReferrer.startsWith(purifiedMemberURL)) {
						resolvedIndex = index;
						continue;
					}
				}
			}

			if (resolvedIndex == null) {
				if (quiet) return;
				if (members.length === 0) {
					alert(
						"Error: There don't appear to be any members.\n\nVisit dabric.xyz/post/linkcircle#its-just-not-detecting-the-member-list to see how you can solve this error.",
					);
				} else if (slug) {
					alert(
						"Error: Invalid slug.\n\nMake sure the URL on the member list is correct, and note that the slug is case-sensitive.",
					);
				} else if (referrer == null) {
					alert(
						"Error: No referrer.\n\nVisit dabric.xyz/post/linkcircle#no-referrer to see how you can solve this error.",
					);
				} else {
					alert(
						"Error: You don't appear to be a member.\n\nVisit dabric.xyz/post/linkcircle#not-a-member for more information.",
					);
				}
				return;
			}

			switch (action) {
				case "next":
					gotoMemberAtIndex(resolvedIndex + 1);
					return;
				case "prev":
					gotoMemberAtIndex(resolvedIndex - 1);
					return;
				case "random":
					const notMeMembers = [...members];
					notMeMembers.splice(resolvedIndex, 1);
					if (notMeMembers.length === 0) {
						gotoMember(members[0]);
						return;
					}
					gotoMember(notMeMembers[randInt(0, notMeMembers.length)]);
					return;
				default:
			}
		}
	}

	function processDocument(document = window.document) {
		const links = document.querySelectorAll("[data-linkcircle] a");
		members = [];
		for (let index = 0; index < links.length; index++) {
			const element = links[index];
			const url = element.getAttribute("href");
			try {
				new URL(url);
			} catch (e) {
				alert(
					`${url}\nis an invalid URL.\nPlease make sure it's an entire "https://example.com" kind of URL.`,
				);
			}
			members.push({
				url: element.getAttribute("href"),
				slug: element.getAttribute("data-lc-slug"),
			});
		}

		if (!noCache) {
			try {
				localStorage.setItem(
					localStorageKey,
					JSON.stringify({
						members: members,
						lastUpdated: Date.now(),
					}),
				);
			} catch {
				localStorage.removeItem(localStorageKey);
			}
		}
	}

	try {
		if (noCache) throw "invalid";
		const maybeCache = localStorage.getItem(localStorageKey);
		if (!maybeCache) throw "invalid";
		const parsed = JSON.parse(maybeCache);

		if (!Array.isArray(parsed?.members)) throw "invalid";
		if (typeof parsed?.lastUpdated !== "number") throw "invalid";
		// make the cache expire after 12 hours
		if (
			parsed.lastUpdated < Date.now() - 1000 * 60 * 60 * 12 ||
			parsed.lastUpdated > Date.now()
		)
			throw "invalid";

		const parsedMembers = parsed.members;
		for (let index = 0; index < parsedMembers.length; index++) {
			const element = parsedMembers[index];
			if (typeof element.url !== "string") throw "invalid";
			if (element.slug != null && typeof element.slug !== "string")
				throw "invalid";
		}

		members = parsed;

		processURL(true);
	} catch (e) {
		if (e !== "invalid") throw e;
	}

	if (!externalPage) {
		window.addEventListener("load", () => {
			processDocument();
			processURL();
		});
	} else {
		(async () => {
			try {
				const request = await fetch(externalPage);
				if (!request.ok) {
					alert(
						`Error: failed to load page. Is it the right URL?\n\n${request.status} ${request.statusText}`,
					);
					return;
				}

				const text = await request.text();

				const domParser = new DOMParser();

				processDocument(domParser.parseFromString(text, "text/html"));
				processURL();
			} catch (e) {
				alert(
					"Error: failed to load page with member list. Check the console (Right click → Inspect → Console).\n\nThis is likely due to the browser interfering, rather than something like the page not existing. Make sure the pages are on the same origin. For example, if one is on example.com, while the other is on example.net, this error could happen.",
				);
				console.error(e);
				return;
			}
		})();
	}
})();
